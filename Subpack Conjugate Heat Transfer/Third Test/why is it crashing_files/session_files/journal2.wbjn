# encoding: utf-8
# 2025 R2
SetScriptVersion(Version="25.2.170")
system1 = GetSystem(Name="FFF")
setup1 = system1.GetContainer(ComponentName="Setup")
fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1 = GetDataEntity("/Mesh/TGridData:TGridData")
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=4))
mesh1 = system1.GetContainer(ComponentName="Mesh")
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command="""/file/set-tui-version \"25.2\"
Graphics driver currently in use: dx11
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)(cx-gui-do cx-activate-item \"Key Behavioral Changes*PanelButtons*PushButton1(OK)\")""")
setup1.SendCommand(Command='(%py-exec "preferences.General.StartupMessages.KeyBehavioralChangesMessage.set_state(True)")')
meshComponent1 = system1.GetComponent(Name="Mesh")
meshComponent1.Reset()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=4))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1.Refresh()
setup1.SendCommand(Command="""/file/set-tui-version \"25.2\"
Graphics driver currently in use: dx11
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)(cx-gui-do cx-activate-item \"Key Behavioral Changes*PanelButtons*PushButton1(OK)\")""")
setup1.SendCommand(Command='(%py-exec "preferences.General.StartupMessages.KeyBehavioralChangesMessage.set_state(True)")')
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.LengthUnit.set_state(r'm')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.AreaUnit.set_state(r'm^2')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.VolumeUnit.set_state(r'm^3')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'cells2:walls'],r'BOIGrowthRate': 1.2,r'BOISize': 0.002,r'BOIZoneorLabel': r'label',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate(DeferUpdate=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'MaxSize': 0.05,r'MinSize': 0.03,},})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.set_state({r'CappingRequired': r'No',r'InvokeShareTopology': r'Yes',r'Multizone': r'No',r'NonConformal': r'No',r'SMImprovePreferences': {r'AdvancedImprove': r'no',r'AllowDefeaturing': r'no',r'SIQualityCollapseLimit': 0.85,r'SIQualityIterations': 5,r'SIQualityMaxAngle': 160,r'SIRemoveStep': r'no',r'SIStepQualityLimit': 0,r'SIStepWidth': 0,r'ShowSMImprovePreferences': False,},r'SetupType': r'The geometry consists of both fluid and solid regions and/or voids',r'WallToInternal': r'No',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(Arguments={r'v1': True,}, SetupTypeChanged=True)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Arguments.set_state({r'InterfaceSelect': r'Manual',})\")")
meshComponent1.Reset()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=4))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1.Refresh()
setup1.SendCommand(Command="""/file/set-tui-version \"25.2\"
Graphics driver currently in use: dx11
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)(cx-gui-do cx-activate-item \"Key Behavioral Changes*PanelButtons*PushButton1(OK)\")""")
setup1.SendCommand(Command='(%py-exec "preferences.General.StartupMessages.KeyBehavioralChangesMessage.set_state(True)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=4))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1.Refresh()
setup1.SendCommand(Command="""/file/set-tui-version \"25.2\"
Graphics driver currently in use: dx11
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)(cx-gui-do cx-activate-item \"Key Behavioral Changes*PanelButtons*PushButton1(OK)\")""")
setup1.SendCommand(Command='(%py-exec "preferences.General.StartupMessages.KeyBehavioralChangesMessage.set_state(True)")')
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.LengthUnit.set_state(r'm')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.AreaUnit.set_state(r'm^2')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.VolumeUnit.set_state(r'm^3')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'cells2:walls'],r'BOIGrowthRate': 1.2,r'BOISize': 0.002,r'BOIZoneorLabel': r'label',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate(DeferUpdate=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'MaxSize': 0.05,r'MinSize': 0.001,},})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.set_state({r'CappingRequired': r'No',r'InvokeShareTopology': r'Yes',r'Multizone': r'No',r'NonConformal': r'No',r'SMImprovePreferences': {r'AdvancedImprove': r'no',r'AllowDefeaturing': r'no',r'SIQualityCollapseLimit': 0.85,r'SIQualityIterations': 5,r'SIQualityMaxAngle': 80,r'SIRemoveStep': r'no',r'SIStepQualityLimit': 0,r'SIStepWidth': 0,r'ShowSMImprovePreferences': False,},r'SetupType': r'The geometry consists of both fluid and solid regions and/or voids',r'WallToInternal': r'No',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(Arguments={r'v1': True,}, SetupTypeChanged=True)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Arguments.set_state({r'InterfaceSelect': r'Manual',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.458117 -5.71955 -0.380148) '(0 0 0) '(0.988059 -0.163454 1.18282) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Arguments.set_state({r'BoundaryLabelList': [r'right-fan-inlet'],r'BoundaryLabelTypeList': [r'wall'],r'OldBoundaryLabelList': [r'right-fan-inlet'],r'OldBoundaryLabelTypeList': [r'velocity-inlet'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Arguments.set_state({r'NumberOfFlowVolumes': 3,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Arguments.set_state({r'NumberOfFlowVolumes': 1,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
geometry1 = system1.GetContainer(ComponentName="Geometry")
geometry1.Edit(IsDiscoveryGeometry=True)
Update()
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command="""/file/set-tui-version \"25.2\"
Graphics driver currently in use: null
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)""")
geometry1.Exit()
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command="""/file/set-tui-version \"25.2\"
Graphics driver currently in use: null
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)""")
setup1.SendCommand(Command="(%py-exec \"meshing.ImportGeometry(FileName=r'C:\\Users\\Owner\\Documents\\GitHub\\Cooling_Modelling\\Subpack Conjugate Heat Transfer\\Third Test\\without interloper_files\\dp0\\FFF\\DM\\FFF.dsco', LengthUnit=r'm', NumParts=78)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.AddLocalSizingWTM(AddChild=r'yes', BOICellsPerGap=1, BOIControlName=r'facesize_1', BOICurvatureNormalAngle=18, BOIExecution=r'Face Size', BOIFaceLabelList=[r'cells2:walls'], BOIGrowthRate=1.2, BOISize=0.002, BOIZoneorLabel=r'label', CompleteFaceLabelList=[r'cells2:walls'])\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['facesize_1'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Warnings.set_state(None)\")")
setup1.SendCommand(Command="(%py-exec \"meshing.GenerateTheSurfaceMeshWTM(CFDSurfaceMeshControls={r'MaxSize': 0.05,r'MinSize': 0.001,}, ExecuteShareTopology=r'Yes', OriginalZones=[r'walls', r'cells-cells2-walls.20', r'cells-cells2-walls.31', r'cells-cells2-walls.42', r'cells-cells2-walls.53', r'cells-cells2-walls.64', r'cells-cells2-walls.69', r'cells-cells2-walls.70', r'cells-cells2-walls.71', r'cells-cells2-walls', r'cells-cells2-walls.1', r'cells-cells2-walls.2', r'cells-cells2-walls.3', r'cells-cells2-walls.4', r'cells-cells2-walls.5', r'cells-cells2-walls.6', r'cells-cells2-walls.7', r'cells-cells2-walls.8', r'cells-cells2-walls.9', r'cells-cells2-walls.10', r'cells-cells2-walls.11', r'cells-cells2-walls.12', r'cells-cells2-walls.13', r'cells-cells2-walls.14', r'cells-cells2-walls.15', r'cells-cells2-walls.16', r'cells-cells2-walls.17', r'cells-cells2-walls.18', r'cells-cells2-walls.19', r'cells-cells2-walls.21', r'cells-cells2-walls.22', r'cells-cells2-walls.23', r'cells-cells2-walls.24', r'cells-cells2-walls.25', r'cells-cells2-walls.26', r'cells-cells2-walls.27', r'cells-cells2-walls.28', r'cells-cells2-walls.29', r'cells-cells2-walls.30', r'cells-cells2-walls.32', r'cells-cells2-walls.33', r'cells-cells2-walls.34', r'cells-cells2-walls.35', r'cells-cells2-walls.36', r'cells-cells2-walls.37', r'cells-cells2-walls.38', r'cells-cells2-walls.39', r'cells-cells2-walls.40', r'cells-cells2-walls.41', r'cells-cells2-walls.43', r'cells-cells2-walls.44', r'cells-cells2-walls.45', r'cells-cells2-walls.46', r'cells-cells2-walls.47', r'cells-cells2-walls.48', r'cells-cells2-walls.49', r'cells-cells2-walls.50', r'cells-cells2-walls.51', r'cells-cells2-walls.52', r'cells-cells2-walls.54', r'cells-cells2-walls.55', r'cells-cells2-walls.56', r'cells-cells2-walls.57', r'cells-cells2-walls.58', r'cells-cells2-walls.59', r'cells-cells2-walls.60', r'cells-cells2-walls.61', r'cells-cells2-walls.62', r'cells-cells2-walls.63', r'cells-cells2-walls.65', r'cells-cells2-walls.66', r'cells-cells2-walls.67', r'cells-cells2-walls.68', r'default-default', r'walls.1', r'right-fan-inlet', r'default-default.1', r'walls.2', r'outlet', r'walls.3', r'solid', r'inlet', r'solid.1', r'inlet.1'])\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.GeometrySetup(CappingRequired=r'No', InvokeShareTopology=r'Yes', Multizone=r'No', NonConformal=r'No', SMImprovePreferences={r'AdvancedImprove': r'no',r'AllowDefeaturing': r'no',r'SIQualityCollapseLimit': 0.85,r'SIQualityIterations': 5,r'SIQualityMaxAngle': 80,r'SIRemoveStep': r'no',r'SIStepQualityLimit': 0,r'SIStepWidth': 0,r'ShowSMImprovePreferences': False,}, SetupType=r'The geometry consists of both fluid and solid regions and/or voids', WallToInternal=r'No')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup1.SendCommand(Command="(%py-exec \"meshing.ShareTopology(InterfaceSelect=r'Manual')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.UpdateBoundaries(BoundaryLabelList=[r'right-fan-inlet'], BoundaryLabelTypeList=[r'wall'], OldBoundaryLabelList=[r'right-fan-inlet'], OldBoundaryLabelTypeList=[r'velocity-inlet'], OldLabelZoneList=[r'right-fan-inlet'])\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Warnings.set_state(None)\")")
setup1.SendCommand(Command='(%py-exec "meshing.CreateRegions(NumberOfFlowVolumes=3)")')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command='(%py-exec "meshing.UpdateRegions()")')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command='(%py-exec "meshing.GenerateTheVolumeMeshWTM()")')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].State.set_state(r'Up-to-date')\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
solution1 = system1.GetContainer(ComponentName="Solution")
MonitorChart1 = solution1.CreateMonitorChart(
    defaultlogbasey="LogBaseCommon",
    Name="",
    ChartType="Residual")
Fluent.UpdateMonitorChart(
    Container=solution1,
    ChartName="")
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=4))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command="""/file/set-tui-version \"25.2\"
Graphics driver currently in use: dx11
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)""")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Key Behavioral Changes*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(%py-exec "preferences.General.StartupMessages.KeyBehavioralChangesMessage.set_state(True)")')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['facesize_1'].Revert()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['facesize_1'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Arguments.set_state({r'OldRegionNameList': [r'with-holes-the-air-region'],r'OldRegionTypeList': [r'solid'],r'RegionNameList': [r'with-holes-the-air-region'],r'RegionTypeList': [r'fluid'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Arguments.set_state({r'NumberOfFlowVolumes': 4,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.070556 -1.61534 -0.114736) '(0 0 0) '(1.08299 -0.122639 1.06437) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Arguments.set_state({r'OldRegionNameList': [r'solid:2', r'fluid:2', r'with-holes-the-air-region'],r'OldRegionTypeList': [r'fluid', r'fluid', r'solid'],r'RegionNameList': [r'solid:2', r'fluid:2', r'with-holes-the-air-region'],r'RegionTypeList': [r'solid', r'solid', r'fluid'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Arguments.set_state({r'NumberOfFlowVolumes': 2,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Execute()\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].Arguments.set_state({r'LocalPrismPreferences': {r'Continuous': r'Continuous',},})\")")
geometry1.Edit(IsDiscoveryGeometry=True)
geometry1.Exit()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=4))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1.Refresh()
setup1.SendCommand(Command="""/file/set-tui-version \"25.2\"
Graphics driver currently in use: dx11
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)""")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Key Behavioral Changes*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(%py-exec "preferences.General.StartupMessages.KeyBehavioralChangesMessage.set_state(True)")')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'cells2:walls'],r'BOIGrowthRate': 1.2,r'BOISize': 0.002,r'BOIZoneorLabel': r'label',r'DrawSizeControl': True,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate(DeferUpdate=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['facesize_2'].ExecuteUpstreamNonExecutedAndThisTask()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.DeleteTasks(ListOfTasks=[r'facesize_2'])\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Arguments.set_state({r'NumberOfFlowVolumes': 4,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.391879 -5.32833 0.209518) '(0 0 0) '(0.821707 -0.0300089 1.16185) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.040722 -0.0875221 -0.195121) '(0 0 0) '(0.0655028 -0.17483 0.111326) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Arguments.set_state({r'NumberOfFlowVolumes': 2,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Execute()\")")
geometry1.Edit(IsDiscoveryGeometry=True)
geometry1.Exit()
setup1.SendCommand(Command='(wb-check-upstream-change)(cx-gui-do cx-activate-item "Question*OK")')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['facesize_1'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
Save(Overwrite=True)
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Save Project")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
Save(Overwrite=True)

# encoding: utf-8
# 2025 R2
SetScriptVersion(Version="25.2.170")
system1 = GetSystem(Name="FFF")
setup1 = system1.GetContainer(ComponentName="Setup")
fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1 = GetDataEntity("/Mesh/TGridData:TGridData")
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=4))
mesh1 = system1.GetContainer(ComponentName="Mesh")
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command="""/file/set-tui-version \"25.2\"
Graphics driver currently in use: dx11
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)""")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Key Behavioral Changes*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(%py-exec "preferences.General.StartupMessages.KeyBehavioralChangesMessage.set_state(True)")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.0333323 -0.570818 0.485868) '(0 0 0) '(0.335652 0.230482 0.193523) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(1.03386 -4.23058 0.196647) '(0 0 0) '(0.853701 0.222332 0.605138) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['facesize_1'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOIControlName': r'facesize_1',r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'with-holes-solid'],r'BOIGrowthRate': 1.2,r'BOISize': 0.03,r'BOIZoneorLabel': r'label',r'CompleteFaceLabelList': [r'with-holes-solid'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['facesize_1'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'MaxSize': 0.05,r'MinSize': 0.003,},r'ExecuteShareTopology': r'Yes',r'OriginalZones': [r'with-holes-the-air-region', r'inlet', r'cells.20', r'cells.31', r'cells.42', r'cells.53', r'cells.64', r'cells.69', r'cells.70', r'cells.71', r'cells', r'cells.1', r'cells.2', r'cells.3', r'cells.4', r'cells.5', r'cells.6', r'cells.7', r'cells.8', r'cells.9', r'cells.10', r'cells.11', r'cells.12', r'cells.13', r'cells.14', r'cells.15', r'cells.16', r'cells.17', r'cells.18', r'cells.19', r'cells.21', r'cells.22', r'cells.23', r'cells.24', r'cells.25', r'cells.26', r'cells.27', r'cells.28', r'cells.29', r'cells.30', r'cells.32', r'cells.33', r'cells.34', r'cells.35', r'cells.36', r'cells.37', r'cells.38', r'cells.39', r'cells.40', r'cells.41', r'cells.43', r'cells.44', r'cells.45', r'cells.46', r'cells.47', r'cells.48', r'cells.49', r'cells.50', r'cells.51', r'cells.52', r'cells.54', r'cells.55', r'cells.56', r'cells.57', r'cells.58', r'cells.59', r'cells.60', r'cells.61', r'cells.62', r'cells.63', r'cells.65', r'cells.66', r'cells.67', r'cells.68', r'solid', r'outlet'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-2.39315 -1.12642 -5.22699) '(0 0 0) '(0.59202 -0.611158 -0.170958) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.00172609 -0.31832 0.297303) '(0 0 0) '(0.00486314 -0.0202685 -0.021369) 0 0)(cx-use-window-id 51)(handle-key \"??\")(cx-use-window-id 51)(handle-key \"??\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.set_state({r'CappingRequired': r'No',r'InvokeShareTopology': r'Yes',r'Multizone': r'No',r'NonConformal': r'No',r'SMImprovePreferences': {r'AdvancedImprove': r'no',r'AllowDefeaturing': r'no',r'SIQualityCollapseLimit': 0.85,r'SIQualityIterations': 5,r'SIQualityMaxAngle': 160,r'SIRemoveStep': r'no',r'SIStepQualityLimit': 0,r'SIStepWidth': 0,r'ShowSMImprovePreferences': False,},r'SetupType': r'The geometry consists of both fluid and solid regions and/or voids',r'WallToInternal': r'No',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(Arguments={r'v1': True,}, SetupTypeChanged=True)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(0.436003 0.0908997 0.0439086) '(0 0 0) '(0.0125976 -0.119261 0.288075) 0 0)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
geometry1 = system1.GetContainer(ComponentName="Geometry")
geometry1.Edit(IsDiscoveryGeometry=True)
geometry1.Exit()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=4))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1 = system1.GetComponent(Name="Mesh")
meshComponent1.Refresh()
setup1.SendCommand(Command="""/file/set-tui-version \"25.2\"
Graphics driver currently in use: dx11
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)""")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Key Behavioral Changes*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(%py-exec "preferences.General.StartupMessages.KeyBehavioralChangesMessage.set_state(True)")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(0.311475 -1.35442 0.403509) '(0 0 0) '(0.524112 0.290004 0.572054) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'walls'],r'BOIGrowthRate': 1.2,r'BOISize': 0.002,r'BOIZoneorLabel': r'label',r'DrawSizeControl': True,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate(DeferUpdate=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.DeleteTasks(ListOfTasks=[r'facesize_1'])\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['facesize_2'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(cx-gui-do cx-activate-item \"Error*OK\")(cx-use-window-id 51)(cx-set-camera-relative '(-0.237605 -2.91558 -0.142713) '(0 0 0) '(1.17625 -0.150194 0.982218) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'MaxSize': 0.05,r'MinSize': 0.01,},r'ExecuteShareTopology': r'Yes',r'OriginalZones': [r'walls.10', r'walls.21', r'walls.32', r'walls.43', r'walls.54', r'walls.65', r'walls.75', r'walls.76', r'walls.77', r'walls', r'walls.1', r'walls.2', r'walls.3', r'walls.4', r'walls.5', r'walls.6', r'walls.7', r'walls.8', r'walls.9', r'walls.11', r'walls.12', r'walls.13', r'walls.14', r'walls.15', r'walls.16', r'walls.17', r'walls.18', r'walls.19', r'walls.20', r'walls.22', r'walls.23', r'walls.24', r'walls.25', r'walls.26', r'walls.27', r'walls.28', r'walls.29', r'walls.30', r'walls.31', r'walls.33', r'walls.34', r'walls.35', r'walls.36', r'walls.37', r'walls.38', r'walls.39', r'walls.40', r'walls.41', r'walls.42', r'walls.44', r'walls.45', r'walls.46', r'walls.47', r'walls.48', r'walls.49', r'walls.50', r'walls.51', r'walls.52', r'walls.53', r'walls.55', r'walls.56', r'walls.57', r'walls.58', r'walls.59', r'walls.60', r'walls.61', r'walls.62', r'walls.63', r'walls.64', r'walls.66', r'walls.67', r'walls.68', r'walls.69', r'fan-right', r'walls.70', r'fan-left', r'walls.71', r'walls.72', r'inlet', r'walls.73', r'inlet.1', r'outlet', r'walls.74', r'solid', r'fan-right-face-inlet', r'solid.1', r'fan-left-face-inlet'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Error*Cancel")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton1(  Check)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton2(  Quality)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*MeshMenu*Auto Mesh...")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Auto Mesh*Frame1(Auto Identify Volume)*Frame1(Object)*DropDownList1\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Auto Mesh*Frame1(Auto Identify Volume)*Frame1(Object)*DropDownList1")(cx-gui-do cx-activate-item "Error*OK")(cx-gui-do cx-activate-item "Auto Mesh*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mouse Probe Function)*ButtonBox1*Polygon" #t)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mouse Probe Function)*ButtonBox1*Polygon")(cx-gui-do cx-set-toggle-button2 "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mouse Probe Function)*ButtonBox1*Select" #t)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mouse Probe Function)*ButtonBox1*Select")')
Save(Overwrite=True)
Copy(
    FilePath=GetAbsoluteUserPathName("GitHub/Cooling_Modelling/Subpack Conjugate Heat Transfer/Third Test/Fan Version.wbpj"),
    NewFilePath=GetAbsoluteUserPathName("GitHub/Cooling_Modelling/Subpack Conjugate Heat Transfer/Third Test/Fan Version Backup.wbpj"),
    Overwrite=True,
    IncludeBackup=True,
    RevertToLastSaved=True)
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Save Project")(cx-gui-do cx-activate-item "Error*OK")')
Save(Overwrite=True)
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Save Project")(cx-gui-do cx-activate-item "Error*OK")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
Save(Overwrite=True)
Save(Overwrite=True)
